{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Datahop IPFS-Lite is an embeddable, lightweight IPFS peer. This fork started from ipfs-lite . It offers all the features of main ipfs-lite . For certain requirements of datahop it adds some more features of full ipfs, such as config, repo, leveldb etc. Examples cli client go run ./examples/litepeer/litepeer.go mobile client go run ./examples/mobilepeer/mobilepeer.go Objectives [x] create cache repo as ipfs [x] have persistent config information (Id, keys, ports, bootstraps etc) [x] use leveldb as datastore to set up peer [x] generate gomobile binding for android [x] adding content [x] replicating content [x] remove content [x] remove respective replication info for removed content [x] bootstrap mobile client [x] cli for bootstrap peer Documentation Go pkg docs License Copyright 2021 Datahop Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \" AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Acknowledgment This software is part of the NGI Pointer project \"Incentivised Content Dissemination at the Network Edge\" that has received funding from the European Union\u2019s Horizon 2020 research and innovation programme under grant agreement No 871528","title":"Home"},{"location":"#datahop","text":"IPFS-Lite is an embeddable, lightweight IPFS peer. This fork started from ipfs-lite . It offers all the features of main ipfs-lite . For certain requirements of datahop it adds some more features of full ipfs, such as config, repo, leveldb etc.","title":"Datahop"},{"location":"#examples","text":"","title":"Examples"},{"location":"#cli-client","text":"go run ./examples/litepeer/litepeer.go","title":"cli client"},{"location":"#mobile-client","text":"go run ./examples/mobilepeer/mobilepeer.go","title":"mobile client"},{"location":"#objectives","text":"[x] create cache repo as ipfs [x] have persistent config information (Id, keys, ports, bootstraps etc) [x] use leveldb as datastore to set up peer [x] generate gomobile binding for android [x] adding content [x] replicating content [x] remove content [x] remove respective replication info for removed content [x] bootstrap mobile client [x] cli for bootstrap peer","title":"Objectives"},{"location":"#documentation","text":"Go pkg docs","title":"Documentation"},{"location":"#license","text":"Copyright 2021 Datahop Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \" AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"#acknowledgment","text":"This software is part of the NGI Pointer project \"Incentivised Content Dissemination at the Network Edge\" that has received funding from the European Union\u2019s Horizon 2020 research and innovation programme under grant agreement No 871528","title":"Acknowledgment"},{"location":"datahop/","text":"datahop This is datahop cli client Synopsis The Datahop CLI client gives access to datahop network through a CLI Interface. Options -h, --help help for datahop -j, --json json output -p, --pretty pretty json output SEE ALSO datahop add - Add content into datahop network datahop daemon - Start datahop daemon datahop doc - Use to generate documentation datahop get - Get content by tag datahop get - Get content by tag datahop index - Index datahop node content datahop info - Get datahop node information datahop matrix - Get node connectivity and content matrix datahop remove - Remove content from datahop network datahop stop - Stop datahop daemon datahop version - Datahop cli version Auto generated by spf13/cobra on 21-Sep-2021","title":"datahop"},{"location":"datahop/#datahop","text":"This is datahop cli client","title":"datahop"},{"location":"datahop/#synopsis","text":"The Datahop CLI client gives access to datahop network through a CLI Interface.","title":"Synopsis"},{"location":"datahop/#options","text":"-h, --help help for datahop -j, --json json output -p, --pretty pretty json output","title":"Options"},{"location":"datahop/#see-also","text":"datahop add - Add content into datahop network datahop daemon - Start datahop daemon datahop doc - Use to generate documentation datahop get - Get content by tag datahop get - Get content by tag datahop index - Index datahop node content datahop info - Get datahop node information datahop matrix - Get node connectivity and content matrix datahop remove - Remove content from datahop network datahop stop - Stop datahop daemon datahop version - Datahop cli version","title":"SEE ALSO"},{"location":"datahop/#auto-generated-by-spf13cobra-on-21-sep-2021","text":"","title":"Auto generated by spf13/cobra on 21-Sep-2021"},{"location":"datahop_add/","text":"datahop add Add content into datahop network Synopsis This command is used to add a file/content in the datahop network addressable by a given tag. Example: // To tag the content with filename after adding $ datahop add '/home/sabyasachi/Downloads/go1.17.linux-amd64.tar.gz' -p -j // The file will be added the in network with the filename in the format below \"/go1.17.linux-amd64.tar.gz\": { \"Size\": 134787877, \"Type\": \"application/gzip\", \"Name\": \"go1.17.linux-amd64.tar.gz\", \"Hash\": { \"/\": \"bafybeia4ssmbshzjwcuhq6xl3b7pjmfapy6buaaheh75hf7qzjzvs4rogq\" }, \"Timestamp\": 1632207586, \"Owner\": \"QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\" } $ datahop add '/home/sabyasachi/Downloads/go1.17.linux-amd64.tar.gz' -p -j -t golang_latest The file will be added the in network with provided tag in the format below \"/golang_latest\": { \"Size\": 134787877, \"Type\": \"application/gzip\", \"Name\": \"go1.17.linux-amd64.tar.gz\", \"Hash\": { \"/\": \"bafybeia4ssmbshzjwcuhq6xl3b7pjmfapy6buaaheh75hf7qzjzvs4rogq\" }, \"Timestamp\": 1632207767, \"Owner\": \"QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\" }, datahop add [flags] Options -h, --help help for add -t, --tag string Tag for the file/content Options inherited from parent commands -j, --json json output -p, --pretty pretty json output SEE ALSO datahop - This is datahop cli client Auto generated by spf13/cobra on 21-Sep-2021","title":"add"},{"location":"datahop_add/#datahop-add","text":"Add content into datahop network","title":"datahop add"},{"location":"datahop_add/#synopsis","text":"This command is used to add a file/content in the datahop network addressable by a given tag. Example: // To tag the content with filename after adding $ datahop add '/home/sabyasachi/Downloads/go1.17.linux-amd64.tar.gz' -p -j // The file will be added the in network with the filename in the format below \"/go1.17.linux-amd64.tar.gz\": { \"Size\": 134787877, \"Type\": \"application/gzip\", \"Name\": \"go1.17.linux-amd64.tar.gz\", \"Hash\": { \"/\": \"bafybeia4ssmbshzjwcuhq6xl3b7pjmfapy6buaaheh75hf7qzjzvs4rogq\" }, \"Timestamp\": 1632207586, \"Owner\": \"QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\" } $ datahop add '/home/sabyasachi/Downloads/go1.17.linux-amd64.tar.gz' -p -j -t golang_latest The file will be added the in network with provided tag in the format below \"/golang_latest\": { \"Size\": 134787877, \"Type\": \"application/gzip\", \"Name\": \"go1.17.linux-amd64.tar.gz\", \"Hash\": { \"/\": \"bafybeia4ssmbshzjwcuhq6xl3b7pjmfapy6buaaheh75hf7qzjzvs4rogq\" }, \"Timestamp\": 1632207767, \"Owner\": \"QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\" }, datahop add [flags]","title":"Synopsis"},{"location":"datahop_add/#options","text":"-h, --help help for add -t, --tag string Tag for the file/content","title":"Options"},{"location":"datahop_add/#options-inherited-from-parent-commands","text":"-j, --json json output -p, --pretty pretty json output","title":"Options inherited from parent commands"},{"location":"datahop_add/#see-also","text":"datahop - This is datahop cli client","title":"SEE ALSO"},{"location":"datahop_add/#auto-generated-by-spf13cobra-on-21-sep-2021","text":"","title":"Auto generated by spf13/cobra on 21-Sep-2021"},{"location":"datahop_daemon/","text":"datahop daemon Start datahop daemon Synopsis This command is used to start the Datahop Daemon. datahop daemon [flags] Options -h, --help help for daemon Options inherited from parent commands -j, --json json output -p, --pretty pretty json output SEE ALSO datahop - This is datahop cli client Auto generated by spf13/cobra on 21-Sep-2021","title":"daemon"},{"location":"datahop_daemon/#datahop-daemon","text":"Start datahop daemon","title":"datahop daemon"},{"location":"datahop_daemon/#synopsis","text":"This command is used to start the Datahop Daemon. datahop daemon [flags]","title":"Synopsis"},{"location":"datahop_daemon/#options","text":"-h, --help help for daemon","title":"Options"},{"location":"datahop_daemon/#options-inherited-from-parent-commands","text":"-j, --json json output -p, --pretty pretty json output","title":"Options inherited from parent commands"},{"location":"datahop_daemon/#see-also","text":"datahop - This is datahop cli client","title":"SEE ALSO"},{"location":"datahop_daemon/#auto-generated-by-spf13cobra-on-21-sep-2021","text":"","title":"Auto generated by spf13/cobra on 21-Sep-2021"},{"location":"datahop_doc/","text":"datahop doc Use to generate documentation Synopsis This command is used to generate documentation for the CLI. datahop doc [flags] Options -h, --help help for doc Options inherited from parent commands -j, --json json output -p, --pretty pretty json output SEE ALSO datahop - This is datahop cli client Auto generated by spf13/cobra on 21-Sep-2021","title":"doc"},{"location":"datahop_doc/#datahop-doc","text":"Use to generate documentation","title":"datahop doc"},{"location":"datahop_doc/#synopsis","text":"This command is used to generate documentation for the CLI. datahop doc [flags]","title":"Synopsis"},{"location":"datahop_doc/#options","text":"-h, --help help for doc","title":"Options"},{"location":"datahop_doc/#options-inherited-from-parent-commands","text":"-j, --json json output -p, --pretty pretty json output","title":"Options inherited from parent commands"},{"location":"datahop_doc/#see-also","text":"datahop - This is datahop cli client","title":"SEE ALSO"},{"location":"datahop_doc/#auto-generated-by-spf13cobra-on-21-sep-2021","text":"","title":"Auto generated by spf13/cobra on 21-Sep-2021"},{"location":"datahop_get/","text":"datahop get Get content by tag Synopsis This command is used to get file/content from the datahop network by a simple tag Example: // To save at default \"Download\" location $ datahop get /test.txt // To save at a given location $ datahop get /test.txt --location /home/sabyasachi/Documents $ datahop get /test.txt -l /home/sabyasachi/Documents datahop get [flags] Options -h, --help help for get -l, --location string File destination Options inherited from parent commands -j, --json json output -p, --pretty pretty json output SEE ALSO datahop - This is datahop cli client Auto generated by spf13/cobra on 21-Sep-2021","title":"get"},{"location":"datahop_get/#datahop-get","text":"Get content by tag","title":"datahop get"},{"location":"datahop_get/#synopsis","text":"This command is used to get file/content from the datahop network by a simple tag Example: // To save at default \"Download\" location $ datahop get /test.txt // To save at a given location $ datahop get /test.txt --location /home/sabyasachi/Documents $ datahop get /test.txt -l /home/sabyasachi/Documents datahop get [flags]","title":"Synopsis"},{"location":"datahop_get/#options","text":"-h, --help help for get -l, --location string File destination","title":"Options"},{"location":"datahop_get/#options-inherited-from-parent-commands","text":"-j, --json json output -p, --pretty pretty json output","title":"Options inherited from parent commands"},{"location":"datahop_get/#see-also","text":"datahop - This is datahop cli client","title":"SEE ALSO"},{"location":"datahop_get/#auto-generated-by-spf13cobra-on-21-sep-2021","text":"","title":"Auto generated by spf13/cobra on 21-Sep-2021"},{"location":"datahop_index/","text":"datahop index Index datahop node content Synopsis This command is used to get the index of tag-content Example: To pretty print the index in json format $ datahop index -j -p { \"/go1.17.linux-amd64.tar.gz\": { \"Size\": 134787877, \"Type\": \"application/gzip\", \"Name\": \"go1.17.linux-amd64.tar.gz\", \"Hash\": { \"/\": \"bafybeia4ssmbshzjwcuhq6xl3b7pjmfapy6buaaheh75hf7qzjzvs4rogq\" }, \"Timestamp\": 1632207586, \"Owner\": \"QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\" }, \"/golang_latest\": { \"Size\": 134787877, \"Type\": \"application/gzip\", \"Name\": \"go1.17.linux-amd64.tar.gz\", \"Hash\": { \"/\": \"bafybeia4ssmbshzjwcuhq6xl3b7pjmfapy6buaaheh75hf7qzjzvs4rogq\" }, \"Timestamp\": 1632207767, \"Owner\": \"QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\" }, } datahop index [flags] Options -h, --help help for index Options inherited from parent commands -j, --json json output -p, --pretty pretty json output SEE ALSO datahop - This is datahop cli client Auto generated by spf13/cobra on 21-Sep-2021","title":"index"},{"location":"datahop_index/#datahop-index","text":"Index datahop node content","title":"datahop index"},{"location":"datahop_index/#synopsis","text":"This command is used to get the index of tag-content Example: To pretty print the index in json format $ datahop index -j -p { \"/go1.17.linux-amd64.tar.gz\": { \"Size\": 134787877, \"Type\": \"application/gzip\", \"Name\": \"go1.17.linux-amd64.tar.gz\", \"Hash\": { \"/\": \"bafybeia4ssmbshzjwcuhq6xl3b7pjmfapy6buaaheh75hf7qzjzvs4rogq\" }, \"Timestamp\": 1632207586, \"Owner\": \"QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\" }, \"/golang_latest\": { \"Size\": 134787877, \"Type\": \"application/gzip\", \"Name\": \"go1.17.linux-amd64.tar.gz\", \"Hash\": { \"/\": \"bafybeia4ssmbshzjwcuhq6xl3b7pjmfapy6buaaheh75hf7qzjzvs4rogq\" }, \"Timestamp\": 1632207767, \"Owner\": \"QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\" }, } datahop index [flags]","title":"Synopsis"},{"location":"datahop_index/#options","text":"-h, --help help for index","title":"Options"},{"location":"datahop_index/#options-inherited-from-parent-commands","text":"-j, --json json output -p, --pretty pretty json output","title":"Options inherited from parent commands"},{"location":"datahop_index/#see-also","text":"datahop - This is datahop cli client","title":"SEE ALSO"},{"location":"datahop_index/#auto-generated-by-spf13cobra-on-21-sep-2021","text":"","title":"Auto generated by spf13/cobra on 21-Sep-2021"},{"location":"datahop_info/","text":"datahop info Get datahop node information Synopsis This command is used to get the local node information Example: To pretty print the node info in json format $ datahop info -j -p { \"IsDaemonRunning\": true, \"Config\": { \"Identity\": { \"PeerID\": \"QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\" }, \"Addresses\": { \"Swarm\": [ \"/ip4/0.0.0.0/tcp/4501\" ] }, \"Bootstrap\": [], \"SwarmPort\": \"4501\" }, \"Peers\": [], \"CRDTStatus\": { \"m\": 2000, \"k\": 5, \"b\": \"AAAAAAAAB9AAAAAAAAAAIAAABAAAAAEAAAAAAAAABAAAAAABAAIAAAAAAAAAAAAQAAAAAIAAAAAAAAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAAAAAAAAEgAAAAAAAAAAABAAAAAAAIAAAAAAAAAAAAAAAAAAAAEBAEAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAgAEAAAAAAAAAAAAEAAgAAAAAAAAAAAAAAABDAAAAAAAAAAAAAQAhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, \"DiskUsage\": 135071757, \"Addresses\": [ \"/ip4/192.168.29.24/tcp/4501/p2p/QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\", \"/ip4/127.0.0.1/tcp/4501/p2p/QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\" ] } datahop info [flags] Options -h, --help help for info Options inherited from parent commands -j, --json json output -p, --pretty pretty json output SEE ALSO datahop - This is datahop cli client Auto generated by spf13/cobra on 21-Sep-2021","title":"info"},{"location":"datahop_info/#datahop-info","text":"Get datahop node information","title":"datahop info"},{"location":"datahop_info/#synopsis","text":"This command is used to get the local node information Example: To pretty print the node info in json format $ datahop info -j -p { \"IsDaemonRunning\": true, \"Config\": { \"Identity\": { \"PeerID\": \"QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\" }, \"Addresses\": { \"Swarm\": [ \"/ip4/0.0.0.0/tcp/4501\" ] }, \"Bootstrap\": [], \"SwarmPort\": \"4501\" }, \"Peers\": [], \"CRDTStatus\": { \"m\": 2000, \"k\": 5, \"b\": \"AAAAAAAAB9AAAAAAAAAAIAAABAAAAAEAAAAAAAAABAAAAAABAAIAAAAAAAAAAAAQAAAAAIAAAAAAAAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAAAAAAAAEgAAAAAAAAAAABAAAAAAAIAAAAAAAAAAAAAAAAAAAAEBAEAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAgAEAAAAAAAAAAAAEAAgAAAAAAAAAAAAAAABDAAAAAAAAAAAAAQAhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }, \"DiskUsage\": 135071757, \"Addresses\": [ \"/ip4/192.168.29.24/tcp/4501/p2p/QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\", \"/ip4/127.0.0.1/tcp/4501/p2p/QmXpiaCz3M7bRz47ZRUP3uq1WUfquqTNrfzi3j24eNXpe5\" ] } datahop info [flags]","title":"Synopsis"},{"location":"datahop_info/#options","text":"-h, --help help for info","title":"Options"},{"location":"datahop_info/#options-inherited-from-parent-commands","text":"-j, --json json output -p, --pretty pretty json output","title":"Options inherited from parent commands"},{"location":"datahop_info/#see-also","text":"datahop - This is datahop cli client","title":"SEE ALSO"},{"location":"datahop_info/#auto-generated-by-spf13cobra-on-21-sep-2021","text":"","title":"Auto generated by spf13/cobra on 21-Sep-2021"},{"location":"datahop_matrix/","text":"datahop matrix Get node connectivity and content matrix Synopsis This command is used to get connectivity and content matrix Example: To pretty print the node matrix in json format $ datahop matrix -j -p { \"ContentMatrix\": { \"bafybeicqmfjhbvuy75aluslgpjx57q7acpxbhibscwy5vv7hka42as5i5i\": { \"Size\": 26, \"AvgSpeed\": 0.000024795532, \"DownloadStartedAt\": 1631086702, \"DownloadFinishedAt\": 1631086703, \"ProvidedBy\": [ \"QmXzT3KAv27w7MMdnHQ8bDqPxP2wrqoNNUcb9U14aC9wWJ\" ] }, }, \"NodeMatrix\": { \"QmXzT3KAv27w7MMdnHQ8bDqPxP2wrqoNNUcb9U14aC9wWJ\": { \"ConnectionAlive\": false, \"ConnectionSuccessCount\": 1, \"ConnectionFailureCount\": 0, \"LastSuccessfulConnectionDuration\": 69, \"BLEDiscoveredAt\": 0, \"WifiConnectedAt\": 0, \"RSSI\": 0, \"Speed\": 0, \"Frequency\": 0, \"IPFSConnectedAt\": 0, \"DiscoveryDelays\": [], \"ConnectionHistory\": null }, \"QmcWEJqQD3bPMT5Mr7ijdwVCmVjUh5Z7CysiTQPgr2VZBC\": { \"ConnectionAlive\": true, \"ConnectionSuccessCount\": 1, \"ConnectionFailureCount\": 0, \"LastSuccessfulConnectionDuration\": 0, \"BLEDiscoveredAt\": 0, \"WifiConnectedAt\": 0, \"RSSI\": 0, \"Speed\": 0, \"Frequency\": 0, \"IPFSConnectedAt\": 0, \"DiscoveryDelays\": [], \"ConnectionHistory\": null } }, \"TotalUptime\": 40860 } datahop matrix [flags] Options -h, --help help for matrix Options inherited from parent commands -j, --json json output -p, --pretty pretty json output SEE ALSO datahop - This is datahop cli client Auto generated by spf13/cobra on 21-Sep-2021","title":"matrix"},{"location":"datahop_matrix/#datahop-matrix","text":"Get node connectivity and content matrix","title":"datahop matrix"},{"location":"datahop_matrix/#synopsis","text":"This command is used to get connectivity and content matrix Example: To pretty print the node matrix in json format $ datahop matrix -j -p { \"ContentMatrix\": { \"bafybeicqmfjhbvuy75aluslgpjx57q7acpxbhibscwy5vv7hka42as5i5i\": { \"Size\": 26, \"AvgSpeed\": 0.000024795532, \"DownloadStartedAt\": 1631086702, \"DownloadFinishedAt\": 1631086703, \"ProvidedBy\": [ \"QmXzT3KAv27w7MMdnHQ8bDqPxP2wrqoNNUcb9U14aC9wWJ\" ] }, }, \"NodeMatrix\": { \"QmXzT3KAv27w7MMdnHQ8bDqPxP2wrqoNNUcb9U14aC9wWJ\": { \"ConnectionAlive\": false, \"ConnectionSuccessCount\": 1, \"ConnectionFailureCount\": 0, \"LastSuccessfulConnectionDuration\": 69, \"BLEDiscoveredAt\": 0, \"WifiConnectedAt\": 0, \"RSSI\": 0, \"Speed\": 0, \"Frequency\": 0, \"IPFSConnectedAt\": 0, \"DiscoveryDelays\": [], \"ConnectionHistory\": null }, \"QmcWEJqQD3bPMT5Mr7ijdwVCmVjUh5Z7CysiTQPgr2VZBC\": { \"ConnectionAlive\": true, \"ConnectionSuccessCount\": 1, \"ConnectionFailureCount\": 0, \"LastSuccessfulConnectionDuration\": 0, \"BLEDiscoveredAt\": 0, \"WifiConnectedAt\": 0, \"RSSI\": 0, \"Speed\": 0, \"Frequency\": 0, \"IPFSConnectedAt\": 0, \"DiscoveryDelays\": [], \"ConnectionHistory\": null } }, \"TotalUptime\": 40860 } datahop matrix [flags]","title":"Synopsis"},{"location":"datahop_matrix/#options","text":"-h, --help help for matrix","title":"Options"},{"location":"datahop_matrix/#options-inherited-from-parent-commands","text":"-j, --json json output -p, --pretty pretty json output","title":"Options inherited from parent commands"},{"location":"datahop_matrix/#see-also","text":"datahop - This is datahop cli client","title":"SEE ALSO"},{"location":"datahop_matrix/#auto-generated-by-spf13cobra-on-21-sep-2021","text":"","title":"Auto generated by spf13/cobra on 21-Sep-2021"},{"location":"datahop_remove/","text":"datahop remove Remove content from datahop network Synopsis This command is used to remove file/content from the datahop network by a simple tag datahop remove [flags] Options -h, --help help for remove Options inherited from parent commands -j, --json json output -p, --pretty pretty json output SEE ALSO datahop - This is datahop cli client Auto generated by spf13/cobra on 21-Sep-2021","title":"remove"},{"location":"datahop_remove/#datahop-remove","text":"Remove content from datahop network","title":"datahop remove"},{"location":"datahop_remove/#synopsis","text":"This command is used to remove file/content from the datahop network by a simple tag datahop remove [flags]","title":"Synopsis"},{"location":"datahop_remove/#options","text":"-h, --help help for remove","title":"Options"},{"location":"datahop_remove/#options-inherited-from-parent-commands","text":"-j, --json json output -p, --pretty pretty json output","title":"Options inherited from parent commands"},{"location":"datahop_remove/#see-also","text":"datahop - This is datahop cli client","title":"SEE ALSO"},{"location":"datahop_remove/#auto-generated-by-spf13cobra-on-21-sep-2021","text":"","title":"Auto generated by spf13/cobra on 21-Sep-2021"},{"location":"datahop_stop/","text":"datahop stop Stop datahop daemon Synopsis This command is used to stop datahop daemon datahop stop [flags] Options -h, --help help for stop Options inherited from parent commands -j, --json json output -p, --pretty pretty json output SEE ALSO datahop - This is datahop cli client Auto generated by spf13/cobra on 21-Sep-2021","title":"stop"},{"location":"datahop_stop/#datahop-stop","text":"Stop datahop daemon","title":"datahop stop"},{"location":"datahop_stop/#synopsis","text":"This command is used to stop datahop daemon datahop stop [flags]","title":"Synopsis"},{"location":"datahop_stop/#options","text":"-h, --help help for stop","title":"Options"},{"location":"datahop_stop/#options-inherited-from-parent-commands","text":"-j, --json json output -p, --pretty pretty json output","title":"Options inherited from parent commands"},{"location":"datahop_stop/#see-also","text":"datahop - This is datahop cli client","title":"SEE ALSO"},{"location":"datahop_stop/#auto-generated-by-spf13cobra-on-21-sep-2021","text":"","title":"Auto generated by spf13/cobra on 21-Sep-2021"},{"location":"datahop_version/","text":"datahop version Datahop cli version Synopsis This command is used to get cli version datahop version [flags] Options -h, --help help for version Options inherited from parent commands -j, --json json output -p, --pretty pretty json output SEE ALSO datahop - This is datahop cli client Auto generated by spf13/cobra on 21-Sep-2021","title":"version"},{"location":"datahop_version/#datahop-version","text":"Datahop cli version","title":"datahop version"},{"location":"datahop_version/#synopsis","text":"This command is used to get cli version datahop version [flags]","title":"Synopsis"},{"location":"datahop_version/#options","text":"-h, --help help for version","title":"Options"},{"location":"datahop_version/#options-inherited-from-parent-commands","text":"-j, --json json output -p, --pretty pretty json output","title":"Options inherited from parent commands"},{"location":"datahop_version/#see-also","text":"datahop - This is datahop cli client","title":"SEE ALSO"},{"location":"datahop_version/#auto-generated-by-spf13cobra-on-21-sep-2021","text":"","title":"Auto generated by spf13/cobra on 21-Sep-2021"},{"location":"how_to/","text":"How to This is a guide related to some of the how tos for datahop clients How to set up cli as service (Linux) Create a datahop.service file inside ~/.config/systemd/user/ [Unit] Description=Datahop daemon Documentation=https://pkg.go.dev/github.com/datahop/ipfs-lite [Service] LimitNOFILE=1000000 MemorySwapMax=0 ExecStart=/usr/bin/datahop daemon Restart=always [Install] WantedBy=default.target Enable lingering for specific user loginctl enable-linger $USER Enable Datahop service systemctl --user enable datahop Start Datahop service systemctl --user start datahop Check Datahop service status systemctl --user status datahop Stop Datahop service systemctl --user stop datahop How to run mobile client Add the following dependencies in your app level build.gradle dependencies { . . . implementation 'network.datahop.libs:datahop:v0.0.11' implementation 'network.datahop.libs:blediscovery:0.0.5' implementation 'network.datahop.libs:wifidirect:0.0.2' . . } Note : versions might change in future. Please refer to the packages . We need wifi, location, bluetooth permission/enabled to run d2d discovery To start the daemon we can simply do the follwoing BLEServiceDiscovery bleDiscoveryDriver = BLEServiceDiscovery.getInstance(getApplicationContext()); BLEAdvertising bleAdvertisingDriver = BLEAdvertising.getInstance(getApplicationContext()); WifiDirectHotSpot hotspot = WifiDirectHotSpot.getInstance(getApplicationContext()); WifiLink connection = WifiLink.getInstance(getApplicationContext()); Datahop.init( getApplicationContext().getCacheDir() + \"/\" + root, this, bleDiscoveryDriver, bleAdvertisingDriver, hotspot, connection ); bleAdvertisingDriver.setNotifier(Datahop.getAdvertisementNotifier()); bleDiscoveryDriver.setNotifier(Datahop.getDiscoveryNotifier()); hotspot.setNotifier(Datahop.getWifiHotspotNotifier()); connection.setNotifier(Datahop.getWifiConnectionNotifier()); Datahop.start(true); Datahop.startDiscovery(true, true, true); Note : Mobile client documentation is avalable here . You can also refer to the Demo android applicaiton.","title":"How To"},{"location":"how_to/#how-to","text":"This is a guide related to some of the how tos for datahop clients","title":"How to"},{"location":"how_to/#how-to-set-up-cli-as-service-linux","text":"Create a datahop.service file inside ~/.config/systemd/user/ [Unit] Description=Datahop daemon Documentation=https://pkg.go.dev/github.com/datahop/ipfs-lite [Service] LimitNOFILE=1000000 MemorySwapMax=0 ExecStart=/usr/bin/datahop daemon Restart=always [Install] WantedBy=default.target Enable lingering for specific user loginctl enable-linger $USER Enable Datahop service systemctl --user enable datahop Start Datahop service systemctl --user start datahop Check Datahop service status systemctl --user status datahop Stop Datahop service systemctl --user stop datahop","title":"How to set up cli as service (Linux)"},{"location":"how_to/#how-to-run-mobile-client","text":"Add the following dependencies in your app level build.gradle dependencies { . . . implementation 'network.datahop.libs:datahop:v0.0.11' implementation 'network.datahop.libs:blediscovery:0.0.5' implementation 'network.datahop.libs:wifidirect:0.0.2' . . }","title":"How to run mobile client"},{"location":"how_to/#note-versions-might-change-in-future-please-refer-to-the-packages","text":"We need wifi, location, bluetooth permission/enabled to run d2d discovery To start the daemon we can simply do the follwoing BLEServiceDiscovery bleDiscoveryDriver = BLEServiceDiscovery.getInstance(getApplicationContext()); BLEAdvertising bleAdvertisingDriver = BLEAdvertising.getInstance(getApplicationContext()); WifiDirectHotSpot hotspot = WifiDirectHotSpot.getInstance(getApplicationContext()); WifiLink connection = WifiLink.getInstance(getApplicationContext()); Datahop.init( getApplicationContext().getCacheDir() + \"/\" + root, this, bleDiscoveryDriver, bleAdvertisingDriver, hotspot, connection ); bleAdvertisingDriver.setNotifier(Datahop.getAdvertisementNotifier()); bleDiscoveryDriver.setNotifier(Datahop.getDiscoveryNotifier()); hotspot.setNotifier(Datahop.getWifiHotspotNotifier()); connection.setNotifier(Datahop.getWifiConnectionNotifier()); Datahop.start(true); Datahop.startDiscovery(true, true, true);","title":"Note : versions might change in future. Please refer to the  packages."},{"location":"how_to/#note-mobile-client-documentation-is-avalable-here-you-can-also-refer-to-the-demo-android-applicaiton","text":"","title":"Note : Mobile client documentation is avalable  here. You can also refer to the Demo android applicaiton."},{"location":"mobile/","text":"Datahop mobile client This is a documentation for java based andriod application. The doc for golang of the same library is available here . Install In your app level gradle file add the following dependencies ... dependencies { ... implementation 'network.datahop.libs:datahop:v0.0.12' implementation 'network.datahop.libs:blediscovery:0.0.6' implementation 'network.datahop.libs:wifidirect:0.0.3' ... } Init client repository To initialise the repo we need to BLE and Wifi libraries and pass them in the init function try { ... BLEServiceDiscovery bleDiscoveryDriver = BLEServiceDiscovery.getInstance(getApplicationContext()); BLEAdvertising bleAdvertisingDriver = BLEAdvertising.getInstance(getApplicationContext()); WifiDirectHotSpot hotspot = WifiDirectHotSpot.getInstance(getApplicationContext()); WifiLink connection = WifiLink.getInstance(getApplicationContext()); Datahop.init( getApplicationContext().getCacheDir() + \"/\" + root, this, bleDiscoveryDriver, bleAdvertisingDriver, hotspot, connection ); } catch (Exception e) { e.printStackTrace(); } Start client and discovery We will pass a \"shouldBootstrap\" boolean with start . This will determine if the client will connect with datahop default bootstrap node. startDiscovery will take three boolean values in the following order - \"advertising\" : To Advertise BLE Scanning - \"scanning\" : To Scan BLE advertisements from other devices - \"autoDisconnect\" : Auto disconnect from a D2D discovered network try { ... Datahop.start(true); Datahop.startDiscovery(true, true, true); } catch (Exception e) { e.printStackTrace(); } Stop client and discovery if(Datahop.isNodeOnline()) { try { Datahop.stopDiscovery(); Datahop.stop(); } catch (Exception e) { e.printStackTrace(); } } Client id and online status Log.d(\"Node Id\", Datahop.id()); Log.d(\"Node Status onCreate\", String.valueOf(Datahop.isNodeOnline())); ConnectionManager To be able to get imformed about new peer connection and disconnection our Class should implement ConnectionManager . We will be notified through this class functions about new peer connection and disconnection @Override public void peerConnected(String s) { Log.d(\"*** Peer Connected ***\", s); } @Override public void peerDisconnected(String s) { Log.d(\"*** Peer Disconnected ***\", s); } Client Addresses try { Types.StringSlice addrs = Types.StringSlice.parseFrom(Datahop.addrs()); Log.d(\"Addrs : \", addrs.getOutputList().toString()); } catch (Exception e) { e.printStackTrace(); } try { Types.StringSlice ifaceAddrs = Types.StringSlice.parseFrom(Datahop.interfaceAddrs()); Log.d(\"IfaceAddrs : \", ifaceAddrs.getOutputList().toString()); } catch (Exception e) { e.printStackTrace(); } Client Peerinfo try { Log.d(\"peerinfo : \",Datahop.peerInfo()); } catch (Exception e) { e.printStackTrace(); } Connected Peers try { Types.StringSlice peers = Types.StringSlice.parseFrom(Datahop.peers()); Log.d(\"Peers : \", peers.getOutputList().toString()); } catch (Exception e) { e.printStackTrace(); } Client Matrix try { String matrix = Datahop.matrix(); Log.d(\"matrix : \",matrix); } catch (Exception e) { e.printStackTrace(); } Get all the available tags try { Types.StringSlice tags = Types.StringSlice.parseFrom(Datahop.getTags()); Log.d(\"Tags : \", tags.getOutputList().toString()); } catch (Exception e) { e.printStackTrace(); } Get diskusage try { Log.d(\"Size : \", String.valueOf(Datahop.diskUsage())); } catch (Exception e) { e.printStackTrace(); } Add content add takes in the following params - \"tag\": a unique string to tag the given content in the network - \"content\": the content to add in the network in byte array form - \"passphrase\": to encrypt the content. pass \"\" (blank string) to add content without encryption try { String tag = \"my tag\"; byte[] content = tag.getBytes(); // to add content without encryption Datahop.add(tag, content, \"\") // to add content with encryption Datahop.add(tag, content, \"verySecretPassphrase\") } catch (Exception e) { e.printStackTrace(); } Get content get takes in the following params - \"tag\": a unique string tag for getting content from the network - \"passphrase\": to decrypt the content. pass \"\" (blank string) to get content without encryption try { String tag = \"my tag\"; // to get content without encryption byte[] value = Datahop.get(tag, \"\") // to get content with encryption byte[] value = Datahop.add(tag, \"verySecretPassphrase\") // Do something with value } catch (Exception e) { e.printStackTrace(); } // TODO: Get Tags State Matrix DownloadsInProgress","title":"Mobile"},{"location":"mobile/#datahop-mobile-client","text":"This is a documentation for java based andriod application. The doc for golang of the same library is available here .","title":"Datahop mobile client"},{"location":"mobile/#install","text":"In your app level gradle file add the following dependencies ... dependencies { ... implementation 'network.datahop.libs:datahop:v0.0.12' implementation 'network.datahop.libs:blediscovery:0.0.6' implementation 'network.datahop.libs:wifidirect:0.0.3' ... }","title":"Install"},{"location":"mobile/#init-client-repository","text":"To initialise the repo we need to BLE and Wifi libraries and pass them in the init function try { ... BLEServiceDiscovery bleDiscoveryDriver = BLEServiceDiscovery.getInstance(getApplicationContext()); BLEAdvertising bleAdvertisingDriver = BLEAdvertising.getInstance(getApplicationContext()); WifiDirectHotSpot hotspot = WifiDirectHotSpot.getInstance(getApplicationContext()); WifiLink connection = WifiLink.getInstance(getApplicationContext()); Datahop.init( getApplicationContext().getCacheDir() + \"/\" + root, this, bleDiscoveryDriver, bleAdvertisingDriver, hotspot, connection ); } catch (Exception e) { e.printStackTrace(); }","title":"Init client repository"},{"location":"mobile/#start-client-and-discovery","text":"We will pass a \"shouldBootstrap\" boolean with start . This will determine if the client will connect with datahop default bootstrap node. startDiscovery will take three boolean values in the following order - \"advertising\" : To Advertise BLE Scanning - \"scanning\" : To Scan BLE advertisements from other devices - \"autoDisconnect\" : Auto disconnect from a D2D discovered network try { ... Datahop.start(true); Datahop.startDiscovery(true, true, true); } catch (Exception e) { e.printStackTrace(); }","title":"Start client and discovery"},{"location":"mobile/#stop-client-and-discovery","text":"if(Datahop.isNodeOnline()) { try { Datahop.stopDiscovery(); Datahop.stop(); } catch (Exception e) { e.printStackTrace(); } }","title":"Stop client and discovery"},{"location":"mobile/#client-id-and-online-status","text":"Log.d(\"Node Id\", Datahop.id()); Log.d(\"Node Status onCreate\", String.valueOf(Datahop.isNodeOnline()));","title":"Client id and online status"},{"location":"mobile/#connectionmanager","text":"To be able to get imformed about new peer connection and disconnection our Class should implement ConnectionManager . We will be notified through this class functions about new peer connection and disconnection @Override public void peerConnected(String s) { Log.d(\"*** Peer Connected ***\", s); } @Override public void peerDisconnected(String s) { Log.d(\"*** Peer Disconnected ***\", s); }","title":"ConnectionManager"},{"location":"mobile/#client-addresses","text":"try { Types.StringSlice addrs = Types.StringSlice.parseFrom(Datahop.addrs()); Log.d(\"Addrs : \", addrs.getOutputList().toString()); } catch (Exception e) { e.printStackTrace(); } try { Types.StringSlice ifaceAddrs = Types.StringSlice.parseFrom(Datahop.interfaceAddrs()); Log.d(\"IfaceAddrs : \", ifaceAddrs.getOutputList().toString()); } catch (Exception e) { e.printStackTrace(); }","title":"Client Addresses"},{"location":"mobile/#client-peerinfo","text":"try { Log.d(\"peerinfo : \",Datahop.peerInfo()); } catch (Exception e) { e.printStackTrace(); }","title":"Client Peerinfo"},{"location":"mobile/#connected-peers","text":"try { Types.StringSlice peers = Types.StringSlice.parseFrom(Datahop.peers()); Log.d(\"Peers : \", peers.getOutputList().toString()); } catch (Exception e) { e.printStackTrace(); }","title":"Connected Peers"},{"location":"mobile/#client-matrix","text":"try { String matrix = Datahop.matrix(); Log.d(\"matrix : \",matrix); } catch (Exception e) { e.printStackTrace(); }","title":"Client Matrix"},{"location":"mobile/#get-all-the-available-tags","text":"try { Types.StringSlice tags = Types.StringSlice.parseFrom(Datahop.getTags()); Log.d(\"Tags : \", tags.getOutputList().toString()); } catch (Exception e) { e.printStackTrace(); }","title":"Get all the available tags"},{"location":"mobile/#get-diskusage","text":"try { Log.d(\"Size : \", String.valueOf(Datahop.diskUsage())); } catch (Exception e) { e.printStackTrace(); }","title":"Get diskusage"},{"location":"mobile/#add-content","text":"add takes in the following params - \"tag\": a unique string to tag the given content in the network - \"content\": the content to add in the network in byte array form - \"passphrase\": to encrypt the content. pass \"\" (blank string) to add content without encryption try { String tag = \"my tag\"; byte[] content = tag.getBytes(); // to add content without encryption Datahop.add(tag, content, \"\") // to add content with encryption Datahop.add(tag, content, \"verySecretPassphrase\") } catch (Exception e) { e.printStackTrace(); }","title":"Add content"},{"location":"mobile/#get-content","text":"get takes in the following params - \"tag\": a unique string tag for getting content from the network - \"passphrase\": to decrypt the content. pass \"\" (blank string) to get content without encryption try { String tag = \"my tag\"; // to get content without encryption byte[] value = Datahop.get(tag, \"\") // to get content with encryption byte[] value = Datahop.add(tag, \"verySecretPassphrase\") // Do something with value } catch (Exception e) { e.printStackTrace(); } // TODO:","title":"Get content"},{"location":"mobile/#get-tags","text":"","title":"Get Tags"},{"location":"mobile/#state","text":"","title":"State"},{"location":"mobile/#matrix","text":"","title":"Matrix"},{"location":"mobile/#downloadsinprogress","text":"","title":"DownloadsInProgress"}]}